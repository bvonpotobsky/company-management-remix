datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified Boolean   @default(false) // TODO: Implement email verification and change type to Date
  name          String
  password      Password?
  phone         String
  dob           DateTime
  verified      Boolean   @default(false) // This is for admin to verify the user

  hourlyRate  Float         @default(40)
  address     Address?      @relation(fields: [addressId], references: [id])
  addressId   String?       @unique
  bankAccount BankAccount[]
  billing     Billing?
  billingId   String?       @unique

  invoiceCount   Int              @default(0)
  invoices       Invoice[]
  projectMember  ProjectMember[]
  shiftActive    ShiftActive[]
  shiftCompleted ShiftCompleted[]
  roles          Role[]
  logs           Logs[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Role {
  id   String @id @unique @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Permission {
  id   String @id @unique @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id        String        @id @default(cuid())
  name      String
  status    ProjectStatus @default(ACTIVE)
  startDate DateTime
  endDate   DateTime?

  address   Address @relation(fields: [addressId], references: [id])
  addressId String  @unique

  members ProjectMember[]

  shiftActive    ShiftActive[]
  shiftCompleted ShiftCompleted[]

  logs Logs[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum ProjectRole {
  MANAGER
  ADMIN
  SUPERVISOR
  EMPLOYEE
}

model ProjectMember {
  id   String      @id @default(cuid())
  role ProjectRole @default(EMPLOYEE)

  user      User    @relation(fields: [userId], references: [id])
  userId    String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([projectId])
}

model ShiftActive {
  id         String    @id @default(cuid())
  start      DateTime  @default(now())
  end        DateTime?
  breakStart DateTime?
  breakEnd   DateTime?

  user      User    @relation(fields: [userId], references: [id])
  userId    String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([projectId])
}

model ShiftCompleted {
  id    String   @id @default(cuid())
  start DateTime // Normalize server and db time
  end   DateTime
  date  DateTime @default(now())

  user      User    @relation(fields: [userId], references: [id])
  userId    String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([projectId])
  @@index([invoiceId])
}

enum InvoiceStatus {
  PAID
  UNPAID
  OVERDUE
  DRAFT
}

model Invoice {
  id        String        @id @default(cuid())
  userCount Int // This is for the invoice number of the user
  from      DateTime
  to        DateTime
  amount    Float
  status    InvoiceStatus

  user   User   @relation(fields: [userId], references: [id])
  userId String

  shifts ShiftCompleted[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model BankAccount {
  id            String @id @default(cuid())
  bankName      String
  bsb           String
  accountNumber String

  user    User     @relation(fields: [userId], references: [id])
  userId  String   @unique
  Billing Billing?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Address {
  id      String @id @default(cuid())
  street  String
  city    String
  state   String
  zip     String
  country String

  user    User?
  project Project?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Billing   Billing[]
}

model Billing {
  id  String @id @default(cuid())
  abn String @default("")
  tfn String @default("")

  bankAccount   BankAccount? @relation(fields: [bankAccountId], references: [id])
  bankAccountId String?      @unique

  address   Address? @relation(fields: [addressId], references: [id])
  addressId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique

  @@index([addressId])
  @@index([bankAccountId])
  @@index([userId])
}

model Logs {
  id      String @id @default(cuid())
  message String
  meta    Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?

  @@index([userId])
  @@index([projectId])
}
